import java.util.stream.Collectors

plugins {
  id "java"
  id "jacoco"
  id "checkstyle"
  id "org.sonarqube"
  id "org.checkerframework"
  id "org.springframework.boot"
  id "io.spring.dependency-management"
}

apply plugin: "org.checkerframework"

group = "io.github.lengors"

String javaVersion = properties["javaVersion"] ?: "21"
String checkstyleToolVersion = properties["checkstyleToolVersion"] ?: "10.23.1"
String commonsLang3Version = properties["commonsLang3Version"] ?: "3.17.0"
String protoscoutVersion = properties["protoscoutVersion"] ?: "1.0.3"

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(javaVersion)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

compileJava {
  options.compilerArgs += [
    "-AignoreInvalidAnnotationLocations"
  ]
}

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "org.springframework.boot:spring-boot-starter-security"
  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-webflux"
  implementation "io.micrometer:micrometer-tracing-bridge-otel"
  implementation "io.micrometer:context-propagation"
  implementation "org.liquibase:liquibase-core"
  implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
  implementation "io.github.lengors:protoscout:$protoscoutVersion"
  compileOnly "org.springframework.boot:spring-boot-docker-compose"
  developmentOnly "org.springframework.boot:spring-boot-devtools"
  developmentOnly "org.springframework.boot:spring-boot-docker-compose"
  runtimeOnly "io.micrometer:micrometer-registry-prometheus"
  runtimeOnly "io.opentelemetry:opentelemetry-exporter-otlp"
  runtimeOnly "org.postgresql:postgresql"
  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.springframework.boot:spring-boot-testcontainers"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "org.testcontainers:junit-jupiter"
  testImplementation "org.testcontainers:postgresql"
  testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
  testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

test {
  useJUnitPlatform()
}

tasks.register("setVersion") {
  doLast {
    String newVersion = findProperty("newVersion")
    if (newVersion == null) throw new IllegalAccessException("newVersion not set")
    def propertiesFile = file("gradle.properties")
    def version = "^\\s*version\\s*=\\s*(.*?)\\s*\$"
    def text = propertiesFile
      .readLines()
      .stream()
      .map { line ->
        line.replaceAll(version) { matcher ->
          if (matcher.size() < 2) throw new IllegalStateException("$line does not match $version")
          String matchedLine = matcher[0]
          String matchedVersion = matcher[1]
          matchedLine.replace(matchedVersion, newVersion)
        }
      }
      .collect(Collectors.joining(System.lineSeparator()))
    propertiesFile.write(text)
  }
}

checkstyle {
  toolVersion = checkstyleToolVersion
}

checkerFramework {
  checkers = [
    "org.checkerframework.checker.nullness.NullnessChecker",
  ]
}

jacocoTestReport {
  dependsOn test

  reports {
    xml.required = true
  }
}

sonar {
    properties {
        property("sonar.projectKey", "lengors_${project.name}")
        property("sonar.organization", "lengors-github")
        property("sonar.host.url", "https://sonarcloud.io")
    }
}
