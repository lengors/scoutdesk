import java.util.stream.Collectors

plugins {
  id "java"
  id "jacoco"
  id "checkstyle"
  id "org.sonarqube"
	id "org.checkerframework"
	id "org.springframework.boot"
	id "io.spring.dependency-management"
}

apply plugin: "org.checkerframework"

group = "io.github.lengors"

String javaVersion = properties["javaVersion"] ?: "21"
String checkstyleToolVersion = properties["checkstyleToolVersion"] ?: "10.23.1"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(javaVersion)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
  maven { url "https://repo.spring.io/milestone" }
  maven { url "https://repo.spring.io/snapshot" }
}

compileJava {
  options.compilerArgs += [
    "-AignoreInvalidAnnotationLocations"
  ]
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly "org.projectlombok:lombok"
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor "org.projectlombok:lombok"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.security:spring-security-test"
	testCompileOnly "org.projectlombok:lombok"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher"
  testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
  useJUnitPlatform()
}

tasks.register("setVersion") {
  doLast {
    String newVersion = findProperty("newVersion")
    if (newVersion == null) throw new IllegalAccessException("newVersion not set")
    def propertiesFile = file("gradle.properties")
    def version = "^\\s*version\\s*=\\s*(.*?)\\s*\$"
    def text = propertiesFile
      .readLines()
      .stream()
      .map { line ->
        line.replaceAll(version) { matcher ->
          if (matcher.size() < 2) throw new IllegalStateException("$line does not match $version")
          String matchedLine = matcher[0]
          String matchedVersion = matcher[1]
          matchedLine.replace(matchedVersion, newVersion)
        }
      }
      .collect(Collectors.joining(System.lineSeparator()))
    propertiesFile.write(text)
  }
}

checkstyle {
  toolVersion = checkstyleToolVersion
}

checkerFramework {
	checkers = [
		"org.checkerframework.checker.nullness.NullnessChecker",
	]
}

jacocoTestReport {
  dependsOn test

  reports {
    xml.required = true
  }
}

sonar {
    properties {
        property("sonar.projectKey", "lengors_${project.name}")
        property("sonar.organization", "lengors-github")
        property("sonar.host.url", "https://sonarcloud.io")
    }
}
